{"version":3,"sources":["components/wrapper.js","components/header.js","components/card.js","provider.js","components/cardList.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","HeaderStyled","header","Header","CardStyled","props","title","toLowerCase","css","Card","body","img","className","src","alt","Context","createContext","Provider","value","data","children","CardListStyled","CardList","Consumer","map","item","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"m6BACA,IAMeA,EANCC,IAAOC,IAAV,K,sZCEb,IAAMC,EAAeF,IAAOG,OAAV,KAmCHC,EAbA,WACb,OACE,kBAACF,EAAD,KACE,6DACA,qDACA,yJ,+6BC3BN,IAAMG,EAAaL,IAAOC,IAAV,KASZ,SAACK,GACD,OACEA,EAAMC,MAAMC,gBAAkB,aAAaA,eAC3CC,YADA,QAOF,SAACH,GACD,OACEA,EAAMC,MAAMC,gBAAkB,eAAeA,eAC7CC,YADA,QAMF,SAACH,GACD,OACEA,EAAMC,MAAMC,gBAAkB,QAAQA,eACtCC,YADA,QAMF,SAACH,GACD,OACEA,EAAMC,MAAMC,gBAAkB,aAAaA,eAC3CC,YADA,QAkCSC,EAXF,SAAC,GAA0B,IAAxBH,EAAuB,EAAvBA,MAAOI,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,IAC3B,OACE,kBAACP,EAAD,CAAYE,MAAOA,GACjB,uBAAGM,UAAU,SAASN,GACtB,2BAAII,GAEJ,yBAAKG,IAAG,mBAAcF,GAAOG,IAAKR,M,QClElCS,EAAUC,0BAODC,MAJf,SAAkBZ,GAChB,OAAO,kBAACU,EAAQE,SAAT,CAAkBC,MAAO,CAAEC,SAASd,EAAMe,W,6lBCFnD,IAAMC,EAAiBtB,IAAOC,IAAV,KAuDLsB,EAnBE,WACf,OACE,kBAACD,EAAD,KACE,kBAACN,EAAQQ,SAAT,MACG,SAACL,GAAD,OACCA,EAAMC,KAAKK,KAAI,SAACC,GAAD,OACb,kBAAC,EAAD,CACEnB,MAAOmB,EAAKnB,MACZI,KAAMe,EAAKf,KACXgB,IAAKD,EAAKE,GACVhB,IAAKc,EAAKd,cClCTiB,MAXf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.85c64ae3.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\nconst Wrapper = styled.div`\r\n  margin: 0 auto;\r\n  max-width: 1440px;\r\n  padding: 0 2em;\r\n`;\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst HeaderStyled = styled.header`\r\n  text-align: center;\r\n  margin-top: 4.5em;\r\n\r\n  h1 {\r\n    color: var(--Very-Dark-Blue);\r\n    font-weight: 700;\r\n    font-size: 1.7em;\r\n    line-height: 1;\r\n  }\r\n  h2 {\r\n    color: var(--Grayish-Blue);\r\n    font-weight: normal;\r\n    font-size: 1.6em;\r\n    line-height: 0;\r\n  }\r\n  h3 {\r\n    font-weight: 200;\r\n    font-size: 1em;\r\n  }\r\n`;\r\n\r\nconst Header = () => {\r\n  return (\r\n    <HeaderStyled>\r\n      <h2> Reliable, efficient delivery</h2>\r\n      <h1>Powered by Technology</h1>\r\n      <h3>\r\n        Our Artificial Intelligence powered tools use millions of project data\r\n        points to ensure that your project is successful\r\n      </h3>\r\n    </HeaderStyled>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nconst CardStyled = styled.div`\r\n\r\n  background: white;\r\n  border-radius: 5px;\r\n  box-shadow: 0px 5px 10px 0px rgba(0, 0, 0, 0.2);\r\n  margin-bottom:2em;\r\n  padding: 1.5em;\r\n  \r\n\r\n  ${(props) => {\r\n    return (\r\n      props.title.toLowerCase() === \"Supervisor\".toLowerCase() &&\r\n      css`\r\n        border-top: 4px solid var(--cyan);\r\n      `\r\n    );\r\n  }}\r\n\r\n  ${(props) => {\r\n    return (\r\n      props.title.toLowerCase() === \"Team Builder\".toLowerCase() &&\r\n      css`\r\n        border-top: 4px solid var(--red);\r\n      `\r\n    );\r\n  }}\r\n  ${(props) => {\r\n    return (\r\n      props.title.toLowerCase() === \"Karma\".toLowerCase() &&\r\n      css`\r\n        border-top: 4px solid var(--orange);\r\n      `\r\n    );\r\n  }}\r\n  ${(props) => {\r\n    return (\r\n      props.title.toLowerCase() === \"Calculator\".toLowerCase() &&\r\n      css`\r\n        border-top: 4px solid var(--blue);\r\n      `\r\n    );\r\n  }}\r\n\r\n\r\n  .title {\r\n    color: var(--Very-Dark-Blue);\r\n    font-size: 1.5em;\r\n    font-weight: 700;\r\n  }\r\n  p {\r\n    margin: 0;\r\n  }\r\n  img {\r\n    display: block;\r\n    margin-left: auto;\r\n    margin-top: 2em;\r\n  }\r\n`;\r\n\r\nconst Card = ({ title, body, img }) => {\r\n  return (\r\n    <CardStyled title={title}>\r\n      <p className=\"title\">{title}</p>\r\n      <p>{body}</p>\r\n\r\n      <img src={`./images/${img}`} alt={title} />\r\n    </CardStyled>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { createContext } from \"react\";\r\nimport data from \"./data.json\";\r\nconst Context = createContext();\r\nexport { Context };\r\n\r\nfunction Provider(props) {\r\n  return <Context.Provider value={{ data }}>{props.children}</Context.Provider>;\r\n}\r\n\r\nexport default Provider;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Card from \"./card\";\r\nimport { Context } from \"./../provider\";\r\nconst CardListStyled = styled.div`\r\n  display:flex;\r\n  flex-wrap:wrap;\r\n  margin-top:4em;\r\n  \r\n  div:nth-child(n){ \r\n    width:100%\r\n  }\r\n\r\n  @media screen and (min-width: 800px) {\r\n  \r\n  align-items:flex-start;\r\n  justify-content:center;  \r\n  \r\n  div:nth-child(n){\r\n    margin-left:2em;\r\n    width:45%\r\n  }\r\n\r\n  @media screen and (min-width: 1000px ){\r\n    div:nth-child(n){\r\n      width:25%\r\n    }\r\n    div:nth-child(1){\r\n      margin-top:10em;\r\n    }\r\n    div:nth-child(3){\r\n      margin-top:10em;\r\n    }\r\n    div:nth-child(4){\r\n      margin-top:-8em;\r\n    }\r\n  }\r\n\r\n`;\r\n\r\nconst CardList = () => {\r\n  return (\r\n    <CardListStyled>\r\n      <Context.Consumer>\r\n        {(value) =>\r\n          value.data.map((item) => (\r\n            <Card\r\n              title={item.title}\r\n              body={item.body}\r\n              key={item.id}\r\n              img={item.img}\r\n            />\r\n          ))\r\n        }\r\n      </Context.Consumer>\r\n    </CardListStyled>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\nimport Wrapper from \"./components/wrapper\";\nimport Header from \"./components/header\";\nimport CardList from \"./components/cardList\";\nimport Provider from \"./provider\";\nfunction App() {\n  return (\n    <Provider>\n      <Wrapper>\n        <Header />\n        <CardList />\n      </Wrapper>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}